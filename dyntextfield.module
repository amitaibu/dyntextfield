<?php

/**
 * @file
 * A text field that has Key & Value fields.
 */

/**
 * Implements hook_menu().
 */
function dyntextfield_menu() {
  $items = array(
    'dyntextfield/autocomplete' => array(
      'title'             => 'Dynamic Keys Lookup',
      'page callback'     => 'dyntextfield_lookup_keys',
      'access arguments'  => array('access content'),
      'type'              => MENU_CALLBACK,
    )
  );

  return $items;
}

function dyntextfield_lookup_keys($field_name){
  $matches = array();
  $result = db_query("SELECT DISTINCT %s_label as label FROM {content_%s} WHERE %s_label LIKE '%s' ORDER BY %s_label DESC LIMIT 20 ", $s_table_name,$s_table_name,$s_table_name,$s_prefix."%",$s_table_name);

  while ($item = db_fetch_object($result)) {
    $matches[$item->label] = str_replace($s_prefix,"<b>$s_prefix</b>",$item->label);
  }

  print drupal_to_js($matches);
  exit();
}

/**
* Implements hook_field_info().
*/
function dyntextfield_field_info() {
  return array(
    'dyntextfield' => array(
      'label' => t('Dynamic Text Field(s)'),
      'description' => t('Store key/value pairs in the database.'),
      'default_widget' => 'dyntextfield_widget',
      'default_formatter' => 'dyntextfield_default',
    ),
  );
}

/**
* Custom validation of settings values.
*
* Create callbacks like this to do settings validation.
*/
function _dyntextfield_length_validate($element, &$form_state) {
  $value = $form_state['values']['max_length'];
  if ($value && !is_numeric($value)|| $value < 1 || $value > 255) {
    form_set_error('max_length', t('"Max length" must be a number between 1 and 255.'));
  }
}


/**
* Implements hook_field_is_empty().
*/
function dyntextfield_field_is_empty($item, $field) {
  if (!empty($item['dyntext_fieldset'])) {
    return empty($item['dyntext_fieldset']['label']);
  }
  return empty($item['value']);
}

/**
* Implements hook content_generate().
*/
function dyntextfield_content_generate($node, $field) {
  $length = rand(2, 255);
  return array(
    'value' => user_password($length),
  );
}

/**
* Implementation of hook_token_list()
* and hook_token_values().
*
* Optional, provide token values for this field.
*/
function dyntextfield_token_list($type = 'all') {
  if ($type == 'field' || $type == 'all') {
    $tokens = array();

    $tokens['dyntextfield']['raw']       = t('Raw, unfiltered text');
    $tokens['dyntextfield']['formatted'] = t('Formatted and filtered text');

    return $tokens;
  }
}

function dyntextfield_token_values($type, $object = NULL) {
  if ($type == 'field') {
    $item = $object[0];

    $tokens['raw']  = $item['value'];
    $tokens['formatted'] = isset($item['view']) ? $item['view'] : '';
    return $tokens;
  }
}

/**
* Implementation of hook_field_formatter_info().
*/
function dyntextfield_field_formatter_info() {
  return array(
    'dyntextfield_default' => array(
      'label' => t('Dynamic text default'),
      'field types' => array('dyntextfield'),
    ),
    'dyntextfield_plain' => array(
      'label' => t('Dynamic text plain text'),
      'field types' => array('dyntextfield'),
    ),
  );
}

/**
* Theme function for 'default' dyntextfield field formatter.
*
* $element['#item']: the sanitized $delta value for the item,
* $element['#field_name']: the field name,
* $element['#type_name']: the $node->type,
* $element['#formatter']: the $formatter_name,
* $element'#node']: the $node,
* $element['#delta']: the delta of this item, like '0',
*
*/
function theme_dyntextfield_formatter_default($element) {
  return "<span class='dyntext_label field-label'>".$element['#item']['safe_label'].":</span>"."&nbsp;"
        ."<span class='dyntext_value'>".$element['#item']['safe_value']."</span>";
}

/**
* Theme function for 'plain' dyntextfield field formatter.
*/
function theme_dyntextfield_formatter_plain($element) {
  return strip_tags($element['#item']['safe']);
}

/**
 * Theme function to wrap fields as table.
 */
function theme_dyntextfield_form_table(&$form) {

  $content = '<table><tr>';
  foreach ($form as $key => $value) {
    if(substr($key,0,1) == '#') continue;
    $content .= '<td>'.drupal_render($form[$key]).'</td>';
  }
  $content .= '</tr></table>';

  return $content;

}

/**
 * Implements hook_field_widget_info().
 */
function dyntextfield_field_widget_info() {
  return array(
    'dyntextfield_widget' => array(
      'label' => t('Dynamic Textfield Widget'),
      'field types' => array('dyntextfield'),
    ),
    'dyntextfield_textareawidget' => array(
      'label' => t('Dynamic TextArea Widget'),
      'field types' => array('dyntextfield'),
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function dyntextfield_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  $settings += array('size' => 60);

  $form = array();
  $form['size'] = array(
    '#type' => 'textfield',
    '#title' => t('Size of textfield'),
    '#default_value' => $settings['size'],
    '#element_validate' => array('element_validate_integer_positive'),
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function dyntextfield_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  return 'Fixme';
  return implode('<br />', $summary);
}

/**
 * Implements hook_field_widget_form().
 */
function dyntextfield_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element['dyntext_fieldset'] = array (
    '#type' => 'fieldset',
    '#theme' => 'dyntextfield_form_table'
  );

  $element['dyntext_fieldset']['label'] = array(
    '#title' => t('Key'),
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['label']) ? $items[$delta]['label'] : NULL,
    '#autocomplete_path' => 'dyntextfield/autocomplete/'. $field['field_name'],
    '#size' => $instance['settings']['size'],
    '#maxlength' => 255,
  );

  $element['dyntext_fieldset']['value'] = array(
    '#title' => t('Value'),
    '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
    '#size' => $instance['settings']['size'],
    '#maxlength' => $instance['widget']['type'] == 'textfield' ? 255 : NULL,
    '#type' => 'textfield',
  );

  $element['dyntext_fieldset']['value']['#type'] = $instance['widget']['type'] == 'textfield' ? 'textarea' : 'textfield';

  return $element;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dyntextfield_form_biblio_node_form_alter(&$form, $form_state) {

  // this next bit is to remove all the dyntextfield form elements when
  // pub type is not selected on a biblio form
  if (!isset($form_state['values']['biblio_type']) &&
      empty($form_state['post']['biblio_type']) &&
      empty($form_state['submitted']) &&
      empty($form['vid']['#value'])) {

    foreach (element_children($form) as $form_element) {
      $widgets = element_children($form[$form_element]);
      if (count($widgets) && is_array($form[$form_element][current($widgets)]) && array_key_exists('dyntext_fieldset',$form[$form_element][current($widgets)])){
        $form[$form_element] = NULL;
      }
    }
  }

  return $form;
}

/**
 * Provide an interface for exporting our fields to bibtex
 *
 * @param $pub object publication
 * @param $bibtex string
 */
function dyntextfield_biblio_bibtex_export_post($pub, &$bibtex){

  $node = node_load($pub->nid);
  $result = db_query("SELECT field_name  FROM `content_node_field_instance` WHERE `type_name` = '%s' AND `widget_type` = 'dyntextfield_widget' ",$pub->type);

  $i = 0;
  while($a_field = db_fetch_array($result)){
    $s_field_name = $a_field['field_name'];
    if(isset($node->$s_field_name) && is_array($node->$s_field_name)){
      foreach ($node->$s_field_name as $field){
        if(strlen($field['value'])) $bibtex .= _bibtex_format_entry('biblio_extra'.++$i, "{$field['label']}: {$field['value']}");
      }
    }//Add these fields to the biblio export
  }
}

/**
 * Provide an interface for impoting our fields to the biblio type
 *
 * @param $entry array settings
 * @param $node array
 */
function dyntextfield_biblio_bibtex_import($entry, &$node){

  $result = db_query("SELECT field_name  FROM `content_node_field_instance` WHERE `type_name` = 'biblio' AND `widget_type` = 'dyntextfield_widget' ");
  $a_field = db_fetch_array($result);

  $i = 0;
  if($a_field){
    $s_field_name = $a_field['field_name'];
    $node[$s_field_name] = array();
    while(array_key_exists("biblio_extra".++$i,$entry)){
      list($s_key,$s_value) = split(":",$entry["biblio_extra".$i],2);
      if(!strlen(trim($s_value))) $s_value = $s_key;
      $node[$s_field_name][] = array('dyntext_fieldset' => array('label' => trim($s_key),'value' => trim($s_value)));
    }
  }
}
